/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package java2107;


import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Lim Ee Chian
 */
public class CustomerManagePage extends javax.swing.JFrame {
    private TableRowSorter<DefaultTableModel> originalSorter;

    public CustomerManagePage() {
        initComponents();
        
        // Set the location of the JFrame form to be centered on the screen
        setLocationRelativeTo(null);
        
        loadCustomerData();
        
        // set the table's cell editor to null - disable the cell editing functionality / non-editable - for double click usage
        tbManageCustomers.setDefaultEditor(Object.class, null);   
        
        // Disable the Save button before clicking Edit button once
        btnSave.setEnabled(false); 
        
        // Initialization code or data loading code
        DefaultTableModel model = (DefaultTableModel) tbManageCustomers.getModel();
        originalSorter = new TableRowSorter<>(model);
        tbManageCustomers.setRowSorter(originalSorter);
        
        // Define gender options for the cbGender JComboBox
        String[] genderOptions = {"Female", "Male"};
        cbGender.setModel(new DefaultComboBoxModel<>(genderOptions));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taAddress = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbManageCustomers = new javax.swing.JTable();
        btnSearch = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        tfSearch = new javax.swing.JTextField();
        tfCustomerID = new javax.swing.JTextField();
        tfName = new javax.swing.JTextField();
        tfPhoneNumber = new javax.swing.JTextField();
        cbGender = new javax.swing.JComboBox<>();
        dcDateOfBirth = new com.toedter.calendar.JDateChooser();
        btnAdd = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        tfIC = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        tfEmail = new javax.swing.JTextField();
        btnCreateBooking = new javax.swing.JButton();

        setTitle("Serenity Sands Retreat Hotel Room Booking System");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(153, 0, 0));

        jLabel1.setFont(new java.awt.Font("Monotype Corsiva", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Serenity Sands Retreat");

        jLabel2.setFont(new java.awt.Font("Monotype Corsiva", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Hotel Room Booking System");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(452, 452, 452)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jLabel3.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(153, 0, 0));
        jLabel3.setText("Customer ID");

        jLabel4.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(153, 0, 0));
        jLabel4.setText("Name");

        jLabel5.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(153, 0, 0));
        jLabel5.setText("Phone Number");

        jLabel6.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(153, 0, 0));
        jLabel6.setText("Gender");

        jLabel7.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(153, 0, 0));
        jLabel7.setText("Date of Birth");

        taAddress.setColumns(20);
        taAddress.setRows(5);
        taAddress.setSelectionColor(new java.awt.Color(153, 0, 0));
        jScrollPane1.setViewportView(taAddress);

        jLabel8.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(153, 0, 0));
        jLabel8.setText("Address");

        tbManageCustomers.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tbManageCustomers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "IC/Passport", "Phone No.", "Email", "Gender", "DoB", "Address"
            }
        ));
        tbManageCustomers.setSelectionBackground(new java.awt.Color(153, 0, 0));
        tbManageCustomers.setSelectionForeground(new java.awt.Color(255, 255, 255));
        tbManageCustomers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbManageCustomersMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tbManageCustomers);
        if (tbManageCustomers.getColumnModel().getColumnCount() > 0) {
            tbManageCustomers.getColumnModel().getColumn(0).setPreferredWidth(5);
            tbManageCustomers.getColumnModel().getColumn(1).setPreferredWidth(15);
            tbManageCustomers.getColumnModel().getColumn(2).setPreferredWidth(20);
            tbManageCustomers.getColumnModel().getColumn(3).setPreferredWidth(20);
            tbManageCustomers.getColumnModel().getColumn(4).setPreferredWidth(25);
            tbManageCustomers.getColumnModel().getColumn(5).setPreferredWidth(5);
            tbManageCustomers.getColumnModel().getColumn(6).setPreferredWidth(10);
            tbManageCustomers.getColumnModel().getColumn(7).setPreferredWidth(25);
        }

        btnSearch.setBackground(new java.awt.Color(153, 0, 0));
        btnSearch.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        btnSearch.setForeground(new java.awt.Color(255, 255, 255));
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Mongolian Baiti", 1, 24)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(153, 0, 0));
        jLabel9.setText("Manage Customers");

        tfSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfSearchKeyTyped(evt);
            }
        });

        tfCustomerID.setEditable(false);

        cbGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbGender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbGenderActionPerformed(evt);
            }
        });

        btnAdd.setBackground(new java.awt.Color(153, 0, 0));
        btnAdd.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(255, 255, 255));
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(153, 0, 0));
        btnDelete.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Delete");
        btnDelete.setToolTipText("");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnEdit.setBackground(new java.awt.Color(153, 0, 0));
        btnEdit.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        btnEdit.setForeground(new java.awt.Color(255, 255, 255));
        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnRefresh.setBackground(new java.awt.Color(153, 0, 0));
        btnRefresh.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        btnRefresh.setForeground(new java.awt.Color(255, 255, 255));
        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnSave.setBackground(new java.awt.Color(153, 0, 0));
        btnSave.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        btnSave.setForeground(new java.awt.Color(255, 255, 255));
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(153, 0, 0));
        jLabel10.setText("IC/Passport");

        jLabel11.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(153, 0, 0));
        jLabel11.setText("Email");

        btnCreateBooking.setBackground(new java.awt.Color(153, 0, 0));
        btnCreateBooking.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        btnCreateBooking.setForeground(new java.awt.Color(255, 255, 255));
        btnCreateBooking.setText("Create Booking");
        btnCreateBooking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateBookingActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnEdit, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                                    .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(43, 43, 43)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(tfEmail, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                                        .addComponent(tfCustomerID))
                                    .addGap(18, 18, 18)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(cbGender, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(34, 34, 34)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(dcDateOfBirth, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(67, 67, 67)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(tfIC, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(tfPhoneNumber))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnSearch)
                                .addGap(18, 18, 18)
                                .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 756, Short.MAX_VALUE))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCreateBooking, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(419, 419, 419))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(13, 13, 13)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfCustomerID, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tfPhoneNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                            .addComponent(tfIC))
                        .addGap(10, 10, 10)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addComponent(tfEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dcDateOfBirth, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                            .addComponent(cbGender))
                        .addGap(10, 10, 10)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel9)
                        .addGap(25, 25, 25)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnCreateBooking, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // Add button

        DefaultTableModel model = (DefaultTableModel) tbManageCustomers.getModel();
        
        String customerID = tfCustomerID.getText();
        String customerName = tfName.getText();
        String custICpassport = tfIC.getText();
        String phoneNumber = tfPhoneNumber.getText();
        String customerEmail = tfEmail.getText();
        String gender = cbGender.getSelectedItem().toString();  // Retrieve data selected gender from the combo box
        Date dateOfBirth = dcDateOfBirth.getDate(); 
        String address = taAddress.getText();
        
        // Check if fields are filled
        if (customerName.isEmpty() || custICpassport.isEmpty() || phoneNumber.isEmpty() || customerEmail.isEmpty() 
                || gender.isEmpty() || dateOfBirth == null || address.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill up all fields.", 
                    "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            // Check if the tfCustomerID text field is empty
            if (customerID.isEmpty()) {
                // Generate the Customer ID for the new customer record
                customerID = generateCustomerID();

                // Set the generated Customer ID in the tfCustomerID text field
                tfCustomerID.setText(customerID);          
            } else {
                // Clear the tfCustomerID text field when editing a staff record
                tfCustomerID.setText("");
            }
            
        // All fields are filled, proceed with adding the customer
            
            // Format the date
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            String dateOfBirthString = dateFormat.format(dateOfBirth);
            
            model.addRow(new Object[]{customerID, customerName, custICpassport, phoneNumber, 
                                      customerEmail, gender, dateOfBirthString, address});
            String[] dataRow = {customerID, customerName, custICpassport, phoneNumber, customerEmail, 
                                gender, dateOfBirthString, address};
            
            try {
                BufferedWriter bw = new BufferedWriter(new FileWriter("customerInfo.txt", true));
                String rowData = String.join(":", dataRow);
                bw.write(rowData);
                bw.newLine();
                bw.close();

                JOptionPane.showMessageDialog(rootPane, "Add data successfully!");

                // Clear the text fileds
                tfCustomerID.setText("");
                tfName.setText("");
                tfIC.setText("");
                tfPhoneNumber.setText("");
                tfEmail.setText("");
                cbGender.setSelectedIndex(0);
                taAddress.setText("");
                // Clear the date chooser
                dcDateOfBirth.setDate(null);

            } catch (IOException e) {
                System.out.println("IOException occured during add: " + e.getMessage());
            }
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // Save button      
        
        // Check if fields are filled
        if (tfCustomerID.getText().isEmpty() || tfName.getText().isEmpty() || tfIC.getText().isEmpty() || tfPhoneNumber.getText().isEmpty() ||
                tfEmail.getText().isEmpty() || cbGender.getSelectedItem().toString().isEmpty() || dcDateOfBirth == null || taAddress.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill up all fields.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        int selectedRow = tbManageCustomers.getSelectedRow();
        int modelRow = tbManageCustomers.convertRowIndexToModel(selectedRow);  // Convert to model index
       
        
        if (modelRow != -1) {  // Check if a row is selected   
            // Get the modified data from the text fields
            String customerID = tfCustomerID.getText();
            String customerName = tfName.getText();
            String custICpassport = tfIC.getText();
            String phoneNumber = tfPhoneNumber.getText();
            String customerEmail = tfEmail.getText();
            String gender = cbGender.getSelectedItem().toString();  // Retrieve data selected gender from the combo box
            Date dateOfBirth = dcDateOfBirth.getDate(); 
            String address = taAddress.getText();
            
            // Format the date
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            String dateOfBirthString = dateFormat.format(dateOfBirth);
            
            // Read the contents of the file and modify the specific line
            String filePath = "customerInfo.txt";
            File inputFile = new File(filePath);
            List<String> lines = new ArrayList<>();
            boolean modified = false;  // Flag to track if the data is modified
            
            try (BufferedReader br = new BufferedReader(new FileReader(inputFile))) {
                String currentLine;
                while ((currentLine = br.readLine()) != null) { 
                    String[] rowInFile = currentLine.split(":");
                    if (rowInFile.length != tbManageCustomers.getColumnCount()) {
                        // Skip the line if it doesn't have the correct number of elements
                        continue;
                    }
                    
                    String existingCustomerID = rowInFile[0].trim();
                    if (existingCustomerID.equals(customerID)) {   
                        // Modify the data for the matching customerID
                        String[] rowModifyData = {customerID,customerName,custICpassport,phoneNumber,
                                                  customerEmail,gender,dateOfBirthString,address};
                        String rowMData = String.join(":", rowModifyData);
                        lines.add(rowMData);
                        modified = true;
                    } else {
                        lines.add(currentLine);
                    }      
                }
            } catch (IOException e) {
                System.out.println("Error reading file: " + e.getMessage());            
            }
            
            // Write the modified contents back to the customerInfo.txt file if data is modified
            if (modified) {
                try (BufferedWriter bw = new BufferedWriter(new FileWriter(inputFile))) {  // Open the file in write mode            
                    for (String line : lines) {
                        bw.write(line);
                        bw.newLine();
                    }
                    JOptionPane.showMessageDialog(this, "Data saved successfully!");  
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(this, "Error saving data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No matching customer found with the given Customer ID.", "Error", JOptionPane.ERROR_MESSAGE);
            }
            
            // Clear the tbManageRooms table
            DefaultTableModel model = (DefaultTableModel) tbManageCustomers.getModel();
            model.setRowCount(0);
                
            // Read the data from the file and populate the tbManageCustomers table
            try (BufferedReader br = new BufferedReader(new FileReader(inputFile))) {
                String line;
                while ((line = br.readLine()) != null) {
                    String[] rowInFile = line.split(":");
                    model.addRow(rowInFile);                            
                }                
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error saving data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
            
            try {
                // Clear the text fileds
                tfCustomerID.setText("");
                tfName.setText("");
                tfIC.setText("");
                tfPhoneNumber.setText("");
                tfEmail.setText("");
                taAddress.setText("");

                // Clear the date chooser
                dcDateOfBirth.setDate(null);

                // Reset combo box
                if (cbGender.getItemCount() > 0) {
                    cbGender.setSelectedIndex(0);
                }
            } catch (IndexOutOfBoundsException e) {
                // Handle the exception silently or display a custom error message
                System.out.println("IndexOutOfBoundsException occured during save: " + e.getMessage());
            }
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // Refresh button
                
        try {           
            // Reload the original data from the file
            loadCustomerData();

            // Clear the search text field
            tfSearch.setText("");

            // Clear the date chooser
            dcDateOfBirth.setDate(null);

            // Clear the text fileds
            tfCustomerID.setText("");
            tfName.setText("");
            tfIC.setText("");
            tfPhoneNumber.setText("");
            tfEmail.setText("");
            taAddress.setText("");

            // Reset combo box
            if (cbGender.getItemCount() > 0) {
                cbGender.setSelectedIndex(0);
            }
        } catch (IndexOutOfBoundsException e) {
            // Handle the exception silently or display a custom error message
            System.out.println("IndexOutOfBoundsException occurred during refresh: " + e.getMessage());
        } catch (NullPointerException e) {
            // Handle the exception gracefully
            System.out.println("NullPointerException occured during reset: " + e.getMessage());
        }    
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // Search button
        DefaultTableModel model = (DefaultTableModel) tbManageCustomers.getModel();
        TableRowSorter<DefaultTableModel> searchSorter = new TableRowSorter<>(model);
        tbManageCustomers.setRowSorter(searchSorter);
        searchSorter.setRowFilter(RowFilter.regexFilter(tfSearch.getText()));
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // Delete button

        int rowToDelete = tbManageCustomers.getSelectedRow();  // Row number to delete
        if (rowToDelete != -1) { // Check if a row is selected
            int modelDeleteRow = tbManageCustomers.convertRowIndexToModel(rowToDelete);  // Convert to model index
            
            try{
                DefaultTableModel model = (DefaultTableModel) tbManageCustomers.getModel();
                String selectedCustomerID = tbManageCustomers.getValueAt(modelDeleteRow, 0).toString();
                System.out.println("Selected Row Number: " + modelDeleteRow);
                // Delete the row based on the model index
                model.removeRow(modelDeleteRow);

                String filePath = "customerInfo.txt";
            
                try {
                    File inputFile = new File(filePath);

                    // Read the contents of the original file
                    BufferedReader br = new BufferedReader(new FileReader(inputFile));
                    List<String> lines = new ArrayList<>();

                    String currentLine;
                    while ((currentLine = br.readLine()) != null) {
                        String[] rowInFile = currentLine.split(":");
                        if (rowInFile.length != 8) {
                            // Skip the line if it doesn't have the correct number of elements
                            continue;
                        }
                        String existingCustomerID = rowInFile[0].trim();
                        if (existingCustomerID.equals(selectedCustomerID)) {
                            // Skip the line if it matches the selectedCustomerID
                            continue;
                        }
                        lines.add(currentLine);
                    }
                    br.close();

                    // Write the modified data back to the original file
                    BufferedWriter bw = new BufferedWriter(new FileWriter(inputFile));

                    for (String line : lines) {
                        bw.write(line);
                        bw.newLine();
                    }
                    bw.close();

                    System.out.println("Row Deleted successfully");

                    // Clear the text fileds                
                    tfCustomerID.setText("");
                    tfName.setText("");
                    tfIC.setText("");
                    tfPhoneNumber.setText("");
                    tfEmail.setText("");
                    cbGender.setSelectedIndex(0);
                    taAddress.setText("");

                    // Clear the date chooser
                    dcDateOfBirth.setDate(null);
                } catch (IOException e) {
                    // Handle the exception silently or display a custom error message
                    System.out.println("IOException occured during delete: " + e.getMessage());
                } 
            } catch (IndexOutOfBoundsException e) {
                // Handle the exception silently or display a custom error message
                System.out.println("IndexOutOfBoundsException occured during delete: " + e.getMessage());
            }  
        } else {
            // Display an error message indicating that no row is selected
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");               
        }    
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // Edit button
        try {
            int selectedRow = tbManageCustomers.getSelectedRow();       
            int modelRow = tbManageCustomers.convertRowIndexToModel(selectedRow);

            if (modelRow != -1) {
                // Get the modified values from the text fields
                String customerID = tfCustomerID.getText();
                String customerName = tfName.getText();
                String custICpassport = tfIC.getText();
                String phoneNumber = tfPhoneNumber.getText();
                String customerEmail = tfEmail.getText();
                String gender = cbGender.getSelectedItem().toString();
                Date dateOfBirth = dcDateOfBirth.getDate();                                
                String address = taAddress.getText();

                // Format the date
                SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                String dateOfBirthString = dateFormat.format(dateOfBirth);

                // Update the values in the table model
                DefaultTableModel model = (DefaultTableModel) tbManageCustomers.getModel();
                model.setValueAt(customerID, modelRow, 0);
                model.setValueAt(customerName, modelRow, 1);
                model.setValueAt(custICpassport, modelRow,2 );
                model.setValueAt(phoneNumber, modelRow, 3);
                model.setValueAt(customerEmail, modelRow, 4);
                model.setValueAt(gender, modelRow, 5);
                model.setValueAt(dateOfBirthString, modelRow, 6);
                model.setValueAt(address, modelRow, 7);
                btnSave.setEnabled(true);  // Enable the Save button after clicking Edit button once

            } else {
                // Display an error message indicating that no row is selected
                JOptionPane.showMessageDialog(rootPane, "Please select a row to edit.");
            }   
        } catch (IndexOutOfBoundsException e) {
            System.out.println("IndexOutOfBoundsException occur during edit: " + e.getMessage());
            JOptionPane.showMessageDialog(rootPane, "Please select a row to edit.");
        } catch (NullPointerException e) {
            // Handle the exception gracefully
            System.out.println("NullPointerException occured during delete: " + e.getMessage());
        } 
    }//GEN-LAST:event_btnEditActionPerformed

    private void tfSearchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfSearchKeyTyped
        // Everytime the Enter key is pressed, an event is generated
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            DefaultTableModel model = (DefaultTableModel) tbManageCustomers.getModel();
            TableRowSorter<DefaultTableModel> searchSorter = new TableRowSorter<>(model);
            tbManageCustomers.setRowSorter(searchSorter);
        
            String searchText = tfSearch.getText();
            searchSorter.setRowFilter(RowFilter.regexFilter(searchText));
        }
    }//GEN-LAST:event_tfSearchKeyTyped

    private void cbGenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbGenderActionPerformed
        // Gender combo box

        String selectedGender = cbGender.getSelectedItem().toString();      
        try {
            // Handle the selected gender here - add it to the JTable
            DefaultTableModel model = (DefaultTableModel) tbManageCustomers.getModel();
            int selectedRow = tbManageCustomers.getSelectedRow();    
            int modelRow = tbManageCustomers.convertRowIndexToModel(selectedRow);
            model.setValueAt(selectedGender, modelRow, 3);
        } catch (IndexOutOfBoundsException e) {
            System.out.println("IndexOutOfBoundsException occured during combo box selection: " + e.getMessage());
        }
    }//GEN-LAST:event_cbGenderActionPerformed

    private void tbManageCustomersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbManageCustomersMouseClicked
        // Select customer by double clicking the selected row
        
        if (evt.getClickCount() == 2) {
            
            int selectedRow = tbManageCustomers.getSelectedRow();       
            int modelRow = tbManageCustomers.convertRowIndexToModel(selectedRow);

            if (modelRow != -1) {
                // Edit and set the modified values into the table fields - get the values from the selected row and display the values in the text fields
                tfCustomerID.setText(tbManageCustomers.getModel().getValueAt(modelRow, 0).toString());
                tfName.setText(tbManageCustomers.getModel().getValueAt(modelRow, 1).toString());
                tfIC.setText(tbManageCustomers.getModel().getValueAt(modelRow, 2).toString());
                tfPhoneNumber.setText(tbManageCustomers.getModel().getValueAt(modelRow, 3).toString());
                tfEmail.setText(tbManageCustomers.getModel().getValueAt(modelRow, 4).toString());
                cbGender.setSelectedItem(tbManageCustomers.getModel().getValueAt(modelRow, 5).toString());

                // Assuming the date value in the table is stored as a String
                String dateOfBirthString = tbManageCustomers.getModel().getValueAt(modelRow, 6).toString();            
                // Parsing the date string to a Date object
                SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                Date dateOfBirth;
                try {
                    dateOfBirth = dateFormat.parse(dateOfBirthString);
                    // Setting the date in the JDateChooser
                    dcDateOfBirth.setDate(dateOfBirth);
                } catch (ParseException e) {
                    System.out.println("ParseException occured"+ e.getMessage());  // Handle the exception appropriately
                }

                taAddress.setText(tbManageCustomers.getModel().getValueAt(modelRow, 7).toString());            
            }
        }
    }//GEN-LAST:event_tbManageCustomersMouseClicked

    private void btnCreateBookingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateBookingActionPerformed
        // Create Booking button
        
        try {
            // Get the selected row from the table
            int selectedRow = tbManageCustomers.getSelectedRow();
            int modelRow = tbManageCustomers.convertRowIndexToModel(selectedRow);
            if (modelRow != -1) {
                // Get the selected customer ID
                String selectedCustomerID = tbManageCustomers.getValueAt(selectedRow, 0).toString();

                // Create a new BookingReceiptPage instance and pass the customer data
                BookingReceiptPage bookings_receipts = new BookingReceiptPage();

                // Load and display the customer data
                bookings_receipts.setCustomerID(selectedCustomerID);  // Using setCustomerID() method to pass the selected customer ID to the BookingReceiptPage
                try {
                    bookings_receipts.loadNewCustomerData(selectedCustomerID);
                } catch (ParseException e) {
                    System.out.println("ParseException occured during creating booking: " + e.getMessage());
                }
                // Set the visibility of BookingReceiptPage
                bookings_receipts.setVisible(true);

                // Hide the currect CustomerManagePage
                this.setVisible(false);
            } else {
                // Display an error message indicating that no row is selected
                JOptionPane.showMessageDialog(this, "Please select a row to create booking.");
            }
        } catch (IndexOutOfBoundsException e) {
                System.out.println("IndexOutOfBoundsException occured during creating booking: " + e.getMessage());
                JOptionPane.showMessageDialog(this, "Please select a row to create booking.");
        }
    }//GEN-LAST:event_btnCreateBookingActionPerformed

    
    private void loadCustomerData() {
        // Load customerInfo.txt
        DefaultTableModel model = (DefaultTableModel) tbManageCustomers.getModel();
        model.setRowCount(0);
        try (BufferedReader br = new BufferedReader(new FileReader("customerInfo.txt"))) {  
            model.setColumnIdentifiers(new String[] {"ID", "Name", "IC/Passport", "Phone No.", "Email", "Gender", "DoB", "Address"});
            
            String line;            
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(":");
                if (parts.length >= 8) {                    
                    String customerID = parts[0].trim();
                    String customerName = parts[1].trim();
                    String custICpassport = parts[2].trim();
                    String phoneNumber = parts[3].trim();
                    String customerEmail = parts[4].trim();
                    String gender = parts[5].trim();
                    String dateOfBirth = parts[6].trim();
                    String address = parts[7].trim();
                    
                    Object[] rowData = {customerID, customerName, custICpassport, phoneNumber, customerEmail, gender, dateOfBirth, address};
                    model.addRow(rowData);  

                } else {
                    System.out.println("Invalid line: " + line);
                }     
            }
            
            // Initialization code or data loading code
            originalSorter = new TableRowSorter<>(model);
            tbManageCustomers.setRowSorter(originalSorter);
        } catch (IOException e) {
            System.out.println("IOException occured during loading customer data: " + e.getMessage());
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("ArrayIndexOutOfBoundsException occured during loading customer data: " + e.getMessage());
        }
    }
    
    // Method to generate the next Customer ID
    private String generateCustomerID() {
        
        // Read the current Customer ID number from customerID.txt
        try (BufferedReader br = new BufferedReader(new FileReader("customerID.txt"))) {
            String currentID = br.readLine();
            int nextID = Integer.parseInt(currentID) + 1;  // Increment the current Customer ID number

            // Write the updated Customer ID number back to the customerID.txt file
            try (BufferedWriter bw = new BufferedWriter(new FileWriter("customerID.txt"))) {
                bw.write(String.valueOf(nextID));
            }
            
            // Format the Customer ID with leading zeros (e.g., C001, C002)
            String newID = String.format("%03d", nextID);
            
            // Generate the new Customer ID
            String customerID = "C" + newID;
            
            return customerID;
            
        } catch (IOException e) {
            System.out.println("IOException occured during generating Customer ID: " + e.getMessage());  // Handle file reading error
        }   
        return null;
    }
    

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomerManagePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomerManagePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomerManagePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerManagePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CustomerManagePage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCreateBooking;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> cbGender;
    private com.toedter.calendar.JDateChooser dcDateOfBirth;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea taAddress;
    private javax.swing.JTable tbManageCustomers;
    private javax.swing.JTextField tfCustomerID;
    private javax.swing.JTextField tfEmail;
    private javax.swing.JTextField tfIC;
    private javax.swing.JTextField tfName;
    private javax.swing.JTextField tfPhoneNumber;
    private javax.swing.JTextField tfSearch;
    // End of variables declaration//GEN-END:variables
}
