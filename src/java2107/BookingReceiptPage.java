/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package java2107;


import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lim Ee Chian
 */
public class BookingReceiptPage extends javax.swing.JFrame {
    
    public String selectedBookingID;  // Public variable to store the selectedBookingID
    public String selectedCustomerID;  // Public variable to store the selectedCustomerID

    
    // Method to set the bookingID
    public void setBookingID(String selectedBookingID) {
        this.selectedBookingID = selectedBookingID;
    }

    public void setCustomerID(String selectedCustomerID) {
        this.selectedCustomerID = selectedCustomerID;
    }
    
    public BookingReceiptPage() {
        initComponents();
        
        // Set the location of the JFrame form to be centered on the screen
        setLocationRelativeTo(null);
        
        // Set the initial visibility of the save button
        btnSave.setVisible(false);
               
        // set the table's cell editor to null - disable the cell editing functionality / non-editable - for double click usage
        tbRoomReservationDate.setDefaultEditor(Object.class, null);   
        
        // Define Payment method options for the cbPaymentMethod JComboBox
        String[] paymentOptions = {"Cash", "Credit Card", "Debit Card", "Online Payment"};
        cbPaymentMethod.setModel(new DefaultComboBoxModel<>(paymentOptions)); 
        
        
        /* `TableModelListener` listen for any changes in the table, including row deletions. 
        Whenever a row is deleted, the `tableChange()` method will be called, the `calculateAndDisplayCharges()`
        method is then being called to recalculate and display the charges based on the updated data in the table */
        DefaultTableModel model = (DefaultTableModel) tbSelectedRoom.getModel();
        model.addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                if (e.getType() == TableModelEvent.DELETE) {
                    calculateAndDisplayCharges();
                }
            }
        });
        
        // Add property change listener to check-in date chooser
        dcCheckInDate.addPropertyChangeListener(new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if ("date".equals(evt.getPropertyName())) {
                    if (dcCheckInDate.getDate() != null && dcCheckOutDate.getDate() != null) {
                        calculateAndDisplayCharges();
                    }
                }
            }
        });
        
        // Add property change listener to check-out date chooser
        dcCheckOutDate.addPropertyChangeListener(new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if ("date".equals(evt.getPropertyName())) {
                    if (dcCheckInDate.getDate() != null && dcCheckOutDate.getDate() != null) {
                        calculateAndDisplayCharges();
                    }
                }
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        tfBookingID = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        dcCheckInDate = new com.toedter.calendar.JDateChooser();
        jLabel11 = new javax.swing.JLabel();
        dcCheckOutDate = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tbRoomReservationDate = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbSelectedRoom = new javax.swing.JTable();
        tfCustomerID = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        tfCustomerName = new javax.swing.JTextField();
        tfPhoneNumber = new javax.swing.JTextField();
        jlabel = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        tfTotalDaysBooked = new javax.swing.JTextField();
        tfTotalRoomCharges = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        tfServiceTax = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        tfTourismTax = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        tfTotalCharge = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        dcPaymentDate = new com.toedter.calendar.JDateChooser();
        btnBook = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        tfReceiptNo = new javax.swing.JTextField();
        paneReceipt = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        taReceipt = new javax.swing.JTextArea();
        btnView = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        cbPaymentMethod = new javax.swing.JComboBox<>();
        jLabel21 = new javax.swing.JLabel();
        dcBookingDate = new com.toedter.calendar.JDateChooser();
        jLabel22 = new javax.swing.JLabel();
        tfEmail = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        tfIC = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setTitle("Serenity Sands Retreat Hotel Room Booking System");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(153, 0, 0));

        jLabel1.setFont(new java.awt.Font("Monotype Corsiva", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Serenity Sands Retreat");

        jLabel2.setFont(new java.awt.Font("Monotype Corsiva", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Hotel Room Booking System");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(356, 356, 356))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(386, 386, 386))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jLabel3.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(153, 0, 0));
        jLabel3.setText("Booking ID");

        jLabel5.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(153, 0, 0));
        jLabel5.setText("Name");

        tfBookingID.setEditable(false);

        jLabel10.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(153, 0, 0));
        jLabel10.setText("Check In Date");

        jLabel11.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(153, 0, 0));
        jLabel11.setText("Check Out Date");

        jLabel6.setFont(new java.awt.Font("Mongolian Baiti", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(153, 0, 0));
        jLabel6.setText("Booking & Generate Receipt");

        jLabel19.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(153, 0, 0));
        jLabel19.setText("Room(s) Available ");

        tbRoomReservationDate.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tbRoomReservationDate.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Room ID", "Room Floor"
            }
        ));
        tbRoomReservationDate.setSelectionBackground(new java.awt.Color(153, 0, 0));
        tbRoomReservationDate.setSelectionForeground(new java.awt.Color(255, 255, 255));
        tbRoomReservationDate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbRoomReservationDateMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tbRoomReservationDate);

        jLabel7.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(153, 0, 0));
        jLabel7.setText("Selected Room(s)");

        btnSearch.setBackground(new java.awt.Color(153, 0, 0));
        btnSearch.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        btnSearch.setForeground(new java.awt.Color(255, 255, 255));
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnRemove.setBackground(new java.awt.Color(153, 0, 0));
        btnRemove.setFont(new java.awt.Font("Mongolian Baiti", 1, 12)); // NOI18N
        btnRemove.setForeground(new java.awt.Color(255, 255, 255));
        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        tbSelectedRoom.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tbSelectedRoom.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Room ID", "Room Floor", "Room Unit Price"
            }
        ));
        tbSelectedRoom.setSelectionBackground(new java.awt.Color(153, 0, 0));
        tbSelectedRoom.setSelectionForeground(new java.awt.Color(255, 255, 255));
        jScrollPane2.setViewportView(tbSelectedRoom);

        tfCustomerID.setEditable(false);

        jLabel8.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(153, 0, 0));
        jLabel8.setText("Customer ID");

        jLabel9.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(153, 0, 0));
        jLabel9.setText("Phone Number");

        jlabel.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        jlabel.setForeground(new java.awt.Color(153, 0, 0));
        jlabel.setText("Total Room Charges");

        jLabel12.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(153, 0, 0));
        jLabel12.setText("Total Day(s) Booked");

        tfTotalDaysBooked.setEditable(false);

        tfTotalRoomCharges.setEditable(false);

        jLabel14.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(153, 0, 0));
        jLabel14.setText("Service Tax");

        tfServiceTax.setEditable(false);

        jLabel20.setFont(new java.awt.Font("Mongolian Baiti", 1, 12)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(153, 0, 0));
        jLabel20.setText("(per night)");

        jLabel15.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(153, 0, 0));
        jLabel15.setText("Tourism Tax");

        tfTourismTax.setEditable(false);

        jLabel16.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(153, 0, 0));
        jLabel16.setText("Total Charge");

        tfTotalCharge.setEditable(false);

        jLabel17.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(153, 0, 0));
        jLabel17.setText("Payment Date");

        btnBook.setBackground(new java.awt.Color(153, 0, 0));
        btnBook.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        btnBook.setForeground(new java.awt.Color(255, 255, 255));
        btnBook.setText("Book");
        btnBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookActionPerformed(evt);
            }
        });

        btnReset.setBackground(new java.awt.Color(153, 0, 0));
        btnReset.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        btnReset.setForeground(new java.awt.Color(255, 255, 255));
        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(153, 0, 0));
        jLabel13.setText("Receipt No.");

        tfReceiptNo.setEditable(false);

        paneReceipt.setBackground(new java.awt.Color(255, 255, 255));
        paneReceipt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        taReceipt.setEditable(false);
        taReceipt.setColumns(20);
        taReceipt.setRows(5);
        jScrollPane5.setViewportView(taReceipt);

        javax.swing.GroupLayout paneReceiptLayout = new javax.swing.GroupLayout(paneReceipt);
        paneReceipt.setLayout(paneReceiptLayout);
        paneReceiptLayout.setHorizontalGroup(
            paneReceiptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneReceiptLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5)
                .addContainerGap())
        );
        paneReceiptLayout.setVerticalGroup(
            paneReceiptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paneReceiptLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 363, Short.MAX_VALUE)
                .addContainerGap())
        );

        btnView.setBackground(new java.awt.Color(153, 0, 0));
        btnView.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        btnView.setForeground(new java.awt.Color(255, 255, 255));
        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(153, 0, 0));
        jLabel18.setText("Payment Method");

        cbPaymentMethod.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbPaymentMethod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbPaymentMethodActionPerformed(evt);
            }
        });

        jLabel21.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(153, 0, 0));
        jLabel21.setText("Booking Date");

        jLabel22.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(153, 0, 0));
        jLabel22.setText("Email");

        jLabel23.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(153, 0, 0));
        jLabel23.setText("IC/Passport");

        btnSave.setBackground(new java.awt.Color(153, 0, 0));
        btnSave.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        btnSave.setForeground(new java.awt.Color(255, 255, 255));
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Mongolian Baiti", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(153, 0, 0));
        jLabel4.setText("(10% of total room charges)");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnRemove))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(124, 124, 124)
                                    .addComponent(btnSearch))
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(dcCheckInDate, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(33, 33, 33)
                                    .addComponent(dcCheckOutDate, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(88, 88, 88)
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(40, 40, 40)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cbPaymentMethod, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(btnBook, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnSave)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(tfIC))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(tfCustomerName))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(tfCustomerID))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel17, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(tfTourismTax)
                                                .addComponent(tfTotalCharge)
                                                .addComponent(dcPaymentDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(tfServiceTax, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(tfPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(tfEmail))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(jlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(tfTotalRoomCharges, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(tfTotalDaysBooked, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(311, 311, 311)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btnView)
                        .addGap(116, 116, 116))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(paneReceipt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tfReceiptNo)
                                    .addComponent(dcBookingDate, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                                    .addComponent(tfBookingID))))
                        .addContainerGap(26, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel21)
                            .addComponent(dcBookingDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfReceiptNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(paneReceipt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(tfPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(20, 20, 20)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(tfEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(tfTotalDaysBooked)
                                            .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(20, 20, 20)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jlabel)
                                            .addComponent(tfTotalRoomCharges, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, Short.MAX_VALUE)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel14)
                                            .addComponent(tfServiceTax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, 0)
                                        .addComponent(jLabel4)
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(tfTourismTax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, 0)
                                        .addComponent(jLabel20))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel16)
                                            .addComponent(tfTotalCharge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(dcPaymentDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(cbPaymentMethod)
                                            .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(btnBook, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btnView, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(12, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfBookingID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfCustomerID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dcCheckOutDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dcCheckInDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(33, 33, 33)
                                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfIC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(25, 25, 25)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // Save button

        String receiptNo = tfReceiptNo.getText();
        Date paymentDate = dcPaymentDate.getDate();
        String paymentMethod = cbPaymentMethod.getSelectedItem().toString();  // Retrieve data selected payment method from the combo box
        String bookID = tfBookingID.getText();
        Date bookingDate = dcBookingDate.getDate();  
        String customerID = tfCustomerID.getText();
        String customerName = tfCustomerName.getText();
        String custICpassport = tfIC.getText();
        String phoneNumber = tfPhoneNumber.getText();
        String customerEmail = tfEmail.getText();
        Date checkInDate = dcCheckInDate.getDate();
        Date checkOutDate = dcCheckOutDate.getDate();
        String totalDaysBooked = tfTotalDaysBooked.getText();
        String totalRoomCharges = tfTotalRoomCharges.getText();
        String serviceTax = tfServiceTax.getText();
        String tourismTax = tfTourismTax.getText();
        String totalCharge = tfTotalCharge.getText();

        // Format the date
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String paymentDateString = dateFormat.format(paymentDate);
        String bookingDateString = dateFormat.format(bookingDate);
        String checkInDateString = dateFormat.format(checkInDate);
        String checkOutDateString = dateFormat.format(checkOutDate);

        // Read the contents of the file and modify the specific line(s) based on bookID
        String filePath1 = "receiptInfo.txt";
        File inputFile1 = new File(filePath1);
        List<String> lines1 = new ArrayList<>();
        boolean modified1 = false;  // Flag to track if the data is modified

        try (BufferedReader br = new BufferedReader(new FileReader(inputFile1))) {  // First try block
            String line1;
            while ((line1 = br.readLine()) != null) {
                String[] rowInFile1 = line1.split(":");
                if (rowInFile1.length != 17) { 
                    // Skip the line if it doesn't have the correct number of elements
                    continue;
                }
                String existingBookingID1 = rowInFile1[3].trim();
                if (existingBookingID1.equals(bookID)) {
                    // Modify the data for the matching bookID in ArrayList
                    String[] rowModifyData1 = {receiptNo,paymentDateString,paymentMethod,bookID,bookingDateString,customerID,customerName,custICpassport,
                        phoneNumber,customerEmail,checkInDateString,checkOutDateString,totalDaysBooked,totalRoomCharges,serviceTax,tourismTax,totalCharge};
                    String rowMData1 = String.join(":", rowModifyData1);
                    lines1.add(rowMData1);
                    modified1 = true;
                } else {
                    lines1.add(line1);
                }
            }
        } catch (IOException e) {
            System.out.println("Error reading file: " + e.getMessage());
        }

        // Write the modified contents back to the receiptInfo.txt file
        if (modified1) {
            try (BufferedWriter bw = new BufferedWriter(new FileWriter(inputFile1))) {
                /* Second try block - use the try-with-resources statement to automatically close the
                BufferedWriter bw after writing the modified contents to the receiptInfo.txt file.*/
                for (String line : lines1) {
                    bw.write(line);
                    bw.newLine();
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error saving data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {       
            JOptionPane.showMessageDialog(this, "No matching receipt record found with the given booking id.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        // Read the contents of the file and modify the specific line(s) based on bookID
        String filePath2 = "bookingInfo.txt";
        File inputFile2 = new File(filePath2);
        List<String> lines2 = new ArrayList<>();
        boolean modified2 = false;
        boolean foundMatchingRoom = false;  // Flag to track if a matching room is found
        try (BufferedReader br2 = new BufferedReader(new FileReader(inputFile2))) {  // Third try block
            String line2;
            while ((line2 = br2.readLine()) != null) {
                String[] rowInFile2 = line2.split(":");
                if (rowInFile2.length != 7) {
                    // Skip the line if it doesn't have the correct number of elements
                    continue;
                }                
                
                String existingBookingID2 = rowInFile2[0].trim();
                if (existingBookingID2.equals(bookID)) {
                    // Get value of the selected rows from the Selected Room table
                    DefaultTableModel model = (DefaultTableModel) tbSelectedRoom.getModel();
                    int rowCount = model.getRowCount();
                    for (int i = 0; i < rowCount; i++) {
                        String roomNumber = model.getValueAt(i, 0).toString();
                        String roomFloor = model.getValueAt(i, 1).toString();
                        String roomUnitPrice = model.getValueAt(i, 2).toString();

                        // Check if the room in the table is already present in the lines 2 list
                        boolean foundMatchingRoomInList = false;
                        for (String line: lines2) {
                            String[] row = line.split(":");
                            if (row.length != 7) {
                                // Skil the line if it doesn't have the correct number of elements
                                continue;
                            }
                            String existingRoomNumber = row[2].trim();
                            String existingRoomFloor = row[3].trim();
                            String existingRoomUnitPrice = row[4].trim();
                            
                            if (existingRoomNumber.equals(roomNumber) && existingRoomFloor.equals(roomFloor) && 
                                    existingRoomUnitPrice.equals(roomUnitPrice)) {
                                foundMatchingRoomInList = true;
                                break;
                            }
                        }
                        
                        if (!foundMatchingRoomInList) {
                            // Modify the data for the matching bookID
                            String[] rowModifyData2 = {bookID,customerID,roomNumber,roomFloor,roomUnitPrice,checkInDateString,checkOutDateString};
                            String rowMData2 = String.join(":", rowModifyData2);
                            lines2.add(rowMData2);
                            modified2 = true;
                            foundMatchingRoom = true;  // Set the flag to true if a match is found
                        }                       
                    }                    
                } else {
                    lines2.add(line2);
                }
            }
            br2.close();  // close br2 after reading the lines from the bookingInfo.txt file
        } catch (IOException e) {
            System.out.println("Error reading file: " + e.getMessage());
        }
        
        // Display an error message if no matching booking record is found with the given Booking ID
        if (!foundMatchingRoom) {
            JOptionPane.showMessageDialog(this, "No matching booking record found with the given booking id.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        if (modified2) {
            // Write the modified contents back to the bookingInfo.txt file
            try (BufferedWriter bw2 = new BufferedWriter(new FileWriter(inputFile2))) {
                /* Fourth try block - use the try-with-resources statement to automatically close the
                BufferedWriter bw2 after writing the modified contents to the bookingInfo.txt file. */
                for (String line : lines2) { 
                    bw2.write(line);
                    bw2.newLine();
                }
                JOptionPane.showMessageDialog(this, "Data saved successfully!");
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error saving data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        // Display an error message if no matching booking record is found with the given booking id
        } else {
            JOptionPane.showMessageDialog(this, "No matching booking record found with the given booking id.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void cbPaymentMethodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbPaymentMethodActionPerformed
        // Payment method combo box

        String paymentMethod = cbPaymentMethod.getSelectedItem().toString();

    }//GEN-LAST:event_cbPaymentMethodActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // Generate receipt button

        try {
            generateReceipt();
            btnView.setEnabled(false);  // Disable the button after clicking it once
        } catch (Exception e) {
            System.out.println("Exception occured during view receipt: " + e.getMessage());
        }

    }//GEN-LAST:event_btnViewActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // Reset button - Clear all
     
        try {
            Date checkInDate = dcCheckInDate.getDate();
            Date checkOutDate = dcCheckOutDate.getDate();

            tfTotalDaysBooked.setText("");
            tfTotalRoomCharges.setText("");
            tfServiceTax.setText("");
            tfTourismTax.setText("");
            tfTotalCharge.setText("");

            // Reset text area
            taReceipt.setText("");
            btnView.setEnabled(true);
            
            // Reset date chooser
            dcPaymentDate.setDate(null);
            dcBookingDate.setDate(null);

            if (checkInDate != null) {
                dcCheckInDate.setDate(checkInDate);
            }    
            dcCheckInDate.setDate(null);  // Check if checkInDate is not null before setting the date

            if (checkOutDate != null) {
                dcCheckOutDate.setDate(checkOutDate);  // Check if checkOutDate is not null before setting the date
            }
            dcCheckOutDate.setDate(null);
            
            // Reset combo box
            cbPaymentMethod.setSelectedIndex(0);

            // Clear the tbSelectedRoom table
            DefaultTableModel model = (DefaultTableModel) tbRoomReservationDate.getModel();
            model.setRowCount(0);
            DefaultTableModel model2 = (DefaultTableModel) tbSelectedRoom.getModel();
            model2.setRowCount(0);
        } catch (NullPointerException e) {
            // Handle the exception gracefully
            System.out.println("NullPointerException occured during reset: " + e.getMessage());
        }       
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookActionPerformed
        // Book button - save into bookingInfo.txt and receiptInfo.txt
    
        // Save to receiptInfo.txt file
        String receiptNo = tfReceiptNo.getText();
        Date paymentDate = dcPaymentDate.getDate();
        String paymentMethod = cbPaymentMethod.getSelectedItem().toString();  // Retrieve data selected payment method from the combo box
        String bookID = tfBookingID.getText();
        Date bookingDate = dcBookingDate.getDate();
        String customerID = tfCustomerID.getText();
        String customerName = tfCustomerName.getText();
        String custICpassport = tfIC.getText();
        String phoneNumber = tfPhoneNumber.getText();
        String customerEmail = tfEmail.getText();
        Date checkInDate = dcCheckInDate.getDate();
        Date checkOutDate = dcCheckOutDate.getDate();
        String totalDaysBooked = tfTotalDaysBooked.getText();
        String totalRoomCharges = tfTotalRoomCharges.getText();
        String serviceTax = tfServiceTax.getText();
        String tourismTax = tfTourismTax.getText();
        String totalCharge = tfTotalCharge.getText();
    
        String generatedBookingID = "";
        String generatedReceiptNO = "";
        
        try {
            // Check if fields are filled
            if (paymentDate == null || paymentMethod.isEmpty() || bookingDate == null || customerID.isEmpty() || customerName.isEmpty() ||
                custICpassport.isEmpty() || phoneNumber.isEmpty() || customerEmail.isEmpty() || checkInDate == null || checkOutDate == null ||
                totalDaysBooked.isEmpty() || totalRoomCharges.isEmpty() || serviceTax.isEmpty() || tourismTax.isEmpty() || totalCharge.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please fill up all fields.", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                // Check if the tfBookingID text field is empty
                if (bookID.isEmpty()) {
                    // Generate the Booking ID for the new customer record
                    generatedBookingID = generateBookingID();

                    // Set the generated Booking ID in the tfBookingID text field
                    tfBookingID.setText(generatedBookingID);
                } else {
                    // Clear the tfBookingID text field when editing a booking record and receipt record
                    tfBookingID.setText("");
                }

                // Check if the tfReceiptNo text field is empty
                if (receiptNo.isEmpty()) {
                    // Generate the Receipt No for the new customer record
                    generatedReceiptNO = generateReceiptNO();

                    // Set the generated Receipt No in the tfReceiptNo text field
                    tfReceiptNo.setText(generatedReceiptNO);
                } else {
                    // Clear the tfReceiptNo text field when editing a booking record and receipt record
                    tfReceiptNo.setText("");
                } 
            }

        // All fields are filled, proceed with the booking

            // Format the date
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            String paymentDateString = dateFormat.format(paymentDate);
            String bookingDateString = dateFormat.format(bookingDate);
            String checkInDateString = dateFormat.format(checkInDate);
            String checkOutDateString = dateFormat.format(checkOutDate);

            String [] dataRow = {generatedReceiptNO,paymentDateString,paymentMethod,generatedBookingID,bookingDateString,customerID,customerName,custICpassport,
                phoneNumber,customerEmail,checkInDateString,checkOutDateString,totalDaysBooked,totalRoomCharges,serviceTax,tourismTax,totalCharge};

            try (BufferedWriter bw = new BufferedWriter(new FileWriter("receiptInfo.txt",true))) {
                String rowData = String.join(":", dataRow);
                bw.write(rowData);
                bw.newLine();
            } catch (IOException e) {
                System.out.println("IOException occured during writing to receiptInfo.txt: " + e.getMessage());
            }   
            
            try (BufferedWriter bw2 = new BufferedWriter(new FileWriter("bookingInfo.txt", true))) {            
                DefaultTableModel model = (DefaultTableModel) tbSelectedRoom.getModel();
                int rowCount = model.getRowCount();

                // Get value of the selected rows from the Selected Room table               
                for (int i = 0; i < rowCount; i++) {
                    String roomNumber = model.getValueAt(i, 0).toString();
                    String roomFloor = model.getValueAt(i, 1).toString();
                    String roomUnitPrice = model.getValueAt(i, 2).toString();

                    String [] roomRow = {generatedBookingID,customerID,roomNumber,roomFloor,roomUnitPrice,checkInDateString,checkOutDateString};
                    String rowRoom = String.join(":", roomRow);
                    bw2.write(rowRoom);
                    bw2.newLine();
                }
                JOptionPane.showMessageDialog(rootPane, "Room(s) is booked sucessfully!");
            } catch (IOException e) {
                System.out.println("IOException occured during writing to bookingInfo.txt: " + e.getMessage());
            }   
        } catch (NullPointerException e) {
            // Handle the exception gracefully
            System.out.println("NullPointerException occured during reset: " + e.getMessage());
        } 
    }//GEN-LAST:event_btnBookActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // Remove button - Remove selected row
        
        int rowToRemove = tbSelectedRoom.getSelectedRow();
        if (rowToRemove != -1) {
            DefaultTableModel model = (DefaultTableModel) tbSelectedRoom.getModel();
            model.removeRow(rowToRemove);
        } else {
            // Display an error message indicating that no row is selected
            JOptionPane.showMessageDialog(this, "Please select a row to remove.");
        }
 
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // Search button - search from roomInfo.txt and bookingInfo.txt file

        try {
            Date custCheckInDate = dcCheckInDate.getDate();
            Date custCheckOutDate = dcCheckOutDate.getDate();

            // Call the checkAvailable() function
            checkAvailable(custCheckInDate,custCheckOutDate);

        } catch (ParseException e) {
            System.out.println("ParseException occured during search: " + e.getMessage());
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void tbRoomReservationDateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbRoomReservationDateMouseClicked
        // Select room(s) by double clicking the selected rows

        if (evt.getClickCount() == 2) {

            int selectedRow = tbRoomReservationDate.getSelectedRow();
            // Convert to model index
            int modelRow = tbRoomReservationDate.convertRowIndexToModel(selectedRow);  
            // Get the model of the tbRoomReservationDate
            DefaultTableModel model = (DefaultTableModel) tbRoomReservationDate.getModel();
            String roomNumInTable = model.getValueAt(modelRow, 0).toString();

            try (BufferedReader br = new BufferedReader(new FileReader("roomInfo.txt"))) {
                String line;
                while ((line = br.readLine()) != null) {
                    String[] col = line.split(":");
                    String roomNumber = col[0].trim();
                    String roomFloor = col[1].trim();
                    String roomUnitPrice = col[3].trim();

                    if (roomNumInTable.equals(roomNumber)) {
                        Object[] rowData = {roomNumInTable,roomFloor,roomUnitPrice};
                        DefaultTableModel selectedRoomModel = (DefaultTableModel) tbSelectedRoom.getModel();
                        selectedRoomModel.addRow(rowData);
                        break;  // Stop iterating after finding the matching room
                    }
                }
            } catch (IOException e) {
                System.out.println("IOException occured during selecting room(s): " + e.getMessage());
            }
    
            // Calculate and display the charges initially
            calculateAndDisplayCharges();
        }
    }//GEN-LAST:event_tbRoomReservationDateMouseClicked

    private void generateReceipt() {
        taReceipt.setText("");
        
        taReceipt.append("***************************************\n" + 
                          "           Serenity Sands Retreat\n" + 
                          "         Contact: +60 3-1234 5678\n" + 
                          "      Address: 1A Jalan Pantai Indah, \n" + 
                          "            Beachview City, 56789\n" +
                          "               Seaside, Malaysia\n" + 
                          "***************************************\n");
        
        String receiptNo = tfReceiptNo.getText();
        Date paymentDate = dcPaymentDate.getDate();
        String paymentMethod = cbPaymentMethod.getSelectedItem().toString();  // Retrieve data selected payment method from the combo box
        String bookID = tfBookingID.getText();
        Date bookingDate = dcBookingDate.getDate();
        String customerID = tfCustomerID.getText();
        String customerName = tfCustomerName.getText();
        String phoneNumber = tfPhoneNumber.getText();
        String customerEmail = tfEmail.getText();
        Date checkInDate = dcCheckInDate.getDate();
        Date checkOutDate = dcCheckOutDate.getDate();
        String totalDaysBooked = tfTotalDaysBooked.getText();
        String totalRoomCharges = tfTotalRoomCharges.getText();
        String serviceTax = tfServiceTax.getText();
        String tourismTax = tfTourismTax.getText();
        String totalCharge = tfTotalCharge.getText();

        // Format the date
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String paymentDateString = dateFormat.format(paymentDate);
        String checkInDateString = dateFormat.format(checkInDate);
        String checkOutDateString = dateFormat.format(checkOutDate);
        String bookingDateString = dateFormat.format(bookingDate);
        
        taReceipt.append("Receipt Number: " + receiptNo + "\n");
        taReceipt.append("Booking ID: " + bookID + "\n");
        taReceipt.append("Booking Date: " + bookingDateString + "\n");
        taReceipt.append("Check-in Date: " + checkInDateString + "\n");
        taReceipt.append("Check-out Date: " + checkOutDateString + "\n"); 
        
        taReceipt.append("\nCustomer ID: " + customerID + "\n");
        taReceipt.append("Name: " + customerName + "\n");
        taReceipt.append("Phone Number: " + phoneNumber + "\n");
        taReceipt.append("Email: " + customerEmail + "\n");
        taReceipt.append("\n------------Room(s) Booked------------\n");
        DefaultTableModel model = (DefaultTableModel) tbSelectedRoom.getModel();
        int rowCount = model.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            String roomNumber = model.getValueAt(i, 0).toString();
            String roomFloor = model.getValueAt(i, 1).toString();
            String roomUnitPrice = model.getValueAt(i, 2).toString();
                
            taReceipt.append("Room Number: " + roomNumber + "\n");
            taReceipt.append("Room Floor: " + roomFloor + "\n");
            taReceipt.append("Room Unit Price: RM " + roomUnitPrice + "\n\n");
        }
        taReceipt.append("----------------------------------------------\n");
        taReceipt.append("Payment Date: " + paymentDateString + "\n");
        taReceipt.append("Payment Method: " + paymentMethod + "\n");
        taReceipt.append("Total Day(s) Booked: " + totalDaysBooked + "\n");
        taReceipt.append("Total Room Charges: RM " + totalRoomCharges + "\n");
        taReceipt.append("Service Tax (10%): RM " + serviceTax + "\n");
        taReceipt.append("Tourism Tax (per night): RM" + tourismTax + "\n"); 
        taReceipt.append("Total Charge: RM" + totalCharge + "\n");

        
        taReceipt.append("\n***************************************\n" +
                    "Thank you for choosing\nSerenity Sands Retreat!\n" +
                    "For any inquiries,\n" +
                    "please contact us at:\n" +
                    "Email: info@serenitysands.com\n" +
                    "Phone: +60 3-1234 5678\n" +
                    "Website: www.serenitysands.com\n" +
                    "***************************************");
    }


    private void checkAvailable(Date custCheckInDate, Date custCheckOutDate) throws ParseException {
        // Read data from roomInfo.txt file and store it in a list
        
        if (custCheckInDate == null || custCheckOutDate == null) {
            JOptionPane.showMessageDialog(this, "Please select both 'Check In' and 'Check Out' dates");
            return;
        }
        
        List<String[]> roomData = new ArrayList<>();
        
        try (BufferedReader br1 = new BufferedReader(new FileReader("roomInfo.txt"))) {
            String roomLine;
            while ((roomLine = br1.readLine()) != null) {
                String[] col = roomLine.split(":");
                
                // Filter the rows to get available rooms in roomInfo.txt file
                if (col[2].equals("Available")) {
                    String[] extractedColumns = {col[0], col[1]};
                    roomData.add(extractedColumns);        
                }
            }
            
            DefaultTableModel model = (DefaultTableModel) tbRoomReservationDate.getModel();
            model.setRowCount(0); // Clear the table before adding new rows
            SimpleDateFormat sdFormat = new SimpleDateFormat("yyyy-MM-dd");
            for (int i = 0; i < roomData.size()-1; i++) {
                String[] roomRow = roomData.get(i);
                boolean roomHasBooking = false;
                
                try (BufferedReader br2 = new BufferedReader(new FileReader("bookingInfo.txt"))) {
                    String bookingLine;
                    while ((bookingLine = br2.readLine()) != null) {
                        String[] cols = bookingLine.split(":");

                        if (cols[2].equals(roomRow[0])) {
                            roomHasBooking = false;

                            String rCheckInDate = cols[5];
                            String rCheckOutDate = cols[6];

                            Date roomCheckInDate = sdFormat.parse(rCheckInDate);
                            Date roomCheckOutDate = sdFormat.parse(rCheckOutDate);

      
                        // Compare the selected check-in date with the room's check-in and check-out dates
                            if (custCheckInDate.compareTo(roomCheckInDate) > 0 && (custCheckInDate.compareTo(roomCheckOutDate) > 0 || custCheckInDate.compareTo(roomCheckOutDate) == 0 )) {
                                // Room is available                                                          
                            } else if (custCheckOutDate.compareTo(roomCheckInDate) < 0 && (custCheckOutDate.compareTo(roomCheckOutDate) < 0 || custCheckOutDate.compareTo(roomCheckInDate) == 0)) {
                                // Room is available
                            } else {
                                roomHasBooking = true;
                            }                                  
                        }
                    }
                        
                    if (!roomHasBooking) {
                        model.addRow(roomRow);
                    }
                } catch (IOException e) {
                    System.out.println("IOException occured during checking available room:" + e.getMessage());
                }    
            }
        } catch (IOException e) {
            System.out.println("IOException occured during checking available room:" + e.getMessage());
        }
    }
    
    // Method to load and display the old booking data
    public void loadOldBookingData(String selectedBookingID) throws ParseException {
        
        btnSave.setVisible(true);
        btnBook.setVisible(false);
        
        // Search in bookingInfo.txt
        try (BufferedReader br2 = new BufferedReader(new FileReader("bookingInfo.txt"))) {
            String line;
            while ((line = br2.readLine()) != null) {
                String[] col = line.split(":",-1);                
                if (col.length >= 7) {
                    String bookID = col[0].trim();
                    if (bookID.equals(selectedBookingID)) {
                        // Match found, extract relevant information                                   
                        String customerID = col[1].trim();
                        String roomNumber = col[2].trim();
                        String roomFloor = col[3].trim();
                        String roomUnitPrice = col[4].trim();
                        String rCheckInDate = col[5].trim();
                        String rCheckOutDate = col[6].trim();     
                        
                        // Assign the extracted information to respective text fields, date choosers and table 
                        tfBookingID.setText(selectedBookingID);
                        tfCustomerID.setText(customerID);                       

                        SimpleDateFormat sdFormat = new SimpleDateFormat("yyyy-MM-dd");
                        Date roomCheckInDate = sdFormat.parse(rCheckInDate);
                        Date roomCheckOutDate = sdFormat.parse(rCheckOutDate);
                        dcCheckInDate.setDate(roomCheckInDate);
                        dcCheckOutDate.setDate(roomCheckOutDate);

                        // Create the table model - Update the table with the room information
                        DefaultTableModel model = (DefaultTableModel) tbSelectedRoom.getModel();
                        
                        // Add a new row to the table with the room information
                        Object[] rowData = {roomNumber,roomFloor,roomUnitPrice};
                        model.addRow(rowData);                    
                    }                
                }
            }
        } catch (IOException e) {
            System.out.println("IOException occured during loading old booking data: " + e.getMessage());  // Handle file reading error
        }
        
        // Search in receiptInfo.txt
        try (BufferedReader br = new BufferedReader(new FileReader("receiptInfo.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                
                String[] cols = line.split(":",-1);
                if (cols.length >= 17) {
                    String bookID = cols[3].trim();

                    if (bookID.equals(selectedBookingID)) {
                        // Match found, extract relevant information 
                        // Assign the information to respective text fields 
                        String receiptNo = cols[0].trim();
                        String paymentDate = cols[1].trim();
                        String paymentMethod = cols[2].trim();                        
                        String bookingDate = cols[4].trim();
                        String customerID = cols[5].trim();
                        String customerName = cols[6].trim();
                        String custICpassport = cols[7].trim();
                        String phoneNumber = cols[8].trim();
                        String customerEmail = cols[9].trim();
                        String totalDaysBooked = cols[12].trim();
                        String totalRoomCharges = cols[13].trim();
                        String serviceTax = cols[14].trim();
                        String tourismTax = cols[15].trim();
                        String totalCharge = cols[16].trim();

                        tfReceiptNo.setText(receiptNo);
                        tfCustomerID.setText(customerID);
                        tfCustomerName.setText(customerName);
                        tfIC.setText(custICpassport);
                        tfPhoneNumber.setText(phoneNumber);
                        tfEmail.setText(customerEmail);
                        tfTotalDaysBooked.setText(totalDaysBooked);
                        tfTotalRoomCharges.setText(totalRoomCharges);
                        tfServiceTax.setText(serviceTax);
                        tfTourismTax.setText(tourismTax);
                        tfTotalCharge.setText(totalCharge);

                        SimpleDateFormat sdFormat = new SimpleDateFormat("yyyy-MM-dd");
                        Date roomPaymentDate = sdFormat.parse(paymentDate);
                        Date roomBookingDate = sdFormat.parse(bookingDate);
                        dcPaymentDate.setDate(roomPaymentDate);
                        dcBookingDate.setDate(roomBookingDate);
                        
                        cbPaymentMethod.setSelectedItem(paymentMethod);
                    }
                }
            }
        } catch (IOException e) {
            System.out.println("IOException occured during loading old booking data:" + e.getMessage()); // Handle file reading error
        }
    }
    
    // Method to load and display the new customer data (haven booking)
    public void loadNewCustomerData(String selectedCustomerID) throws ParseException  {      
        btnBook.setVisible(true);
        btnSave.setVisible(false);
        
        // Search in customerInfo.txt
        try (BufferedReader br3 = new BufferedReader(new FileReader("customerInfo.txt"))) { 
            String line; 
            while ((line = br3.readLine()) != null) {
                String[] col = line.split(":",-1);
                if (col.length >= 8) {
                    String customerID = col[0].trim();
                    if (customerID.equals(selectedCustomerID)) {
                        // Match found, extract relevant information
                        String customerName = col[1].trim();
                        String custICpassport = col[2].trim();
                        String phoneNumber = col[3].trim();
                        String customerEmail = col[4].trim();
                        
                        // Assign the extracted information to respective text fields
                        tfCustomerID.setText(selectedCustomerID);
                        tfCustomerName.setText(customerName);
                        tfIC.setText(custICpassport);
                        tfPhoneNumber.setText(phoneNumber);
                        tfEmail.setText(customerEmail);
                        
                        // Exit the loop after finding the match
                        break;
                    }
                }
            }
        } catch (IOException e) {
            // Handle file reading error
            System.out.println("IOException occured during loading new customer data:" + e.getMessage());  
        }   
    }
    
    // Method to generate the next Booking ID
    private String generateBookingID() {
        
        // Read the current Booking ID number from bookingID.txt
        try (BufferedReader br = new BufferedReader(new FileReader("bookingID.txt"))) {
            String currentID = br.readLine();
            int nextID = Integer.parseInt(currentID) + 1;  // Increment the current Booking ID number

            // Write the updated Booking ID number back to the bookingID.txt file
            try (BufferedWriter bw = new BufferedWriter(new FileWriter("bookingID.txt"))) {
                bw.write(String.valueOf(nextID));
            }
            
            // Format the Booking ID with leading zeros (e.g., B001, B002)
            String newID = String.format("%03d", nextID);
            
            // Generate the new Booking ID
            String bookingID = "B" + newID;
            
            return bookingID;
            
        } catch (IOException e) {
            // Handle file reading error
            System.out.println("IOException occured during generating Booking ID:" + e.getMessage());  
        }   
        return null;
        
    }
    
    // Method to generate the next Receipt NO
    private String generateReceiptNO() {
        // Read the current Receipt NO number from receiptNO.txt
        try (BufferedReader br = new BufferedReader(new FileReader("receiptNO.txt"))) {
            String currentID = br.readLine();
            int nextID = Integer.parseInt(currentID) + 1;  // Increment the current Receipt NO number

            // Write the updated Receipt NO number back to the receiptNO.txt file
            try (BufferedWriter bw = new BufferedWriter(new FileWriter("receiptNO.txt"))) {
                bw.write(String.valueOf(nextID));
            }
            
            // Format the Receipt NO with leading zeros (e.g., R001, R002)
            String newID = String.format("%03d", nextID);
            
            // Generate the new Receipt NO
            String receiptNO = "R" + newID;
            
            return receiptNO;
            
        } catch (IOException e) {
            System.out.println("IOException occured during generating Receipt Number:" + e.getMessage());  // Handle file reading error
        }   
        return null;
    }
    
    
    private void calculateAndDisplayCharges() {
        // Get the values from the UI/Frame components
        int roomUnitPrice = 350;  // Room unit price: RM 350
        int totalSelectedRooms = tbSelectedRoom.getRowCount();
        int totalDaysBooked = calculateTotalDaysBooked();
        
        // Calculate the charges
        int totalRoomCharges = roomUnitPrice * totalSelectedRooms * totalDaysBooked;
        double serviceTax = totalRoomCharges * 0.1;  // 10% service tax
        int tourismTax = totalDaysBooked * 10;  // RM 10 per night
        double totalCharge = totalRoomCharges + serviceTax + tourismTax;
        
        // Display the charges in the respective text fields
        tfTotalDaysBooked.setText(String.valueOf(calculateTotalDaysBooked()));
        tfTotalRoomCharges.setText(String.valueOf(totalRoomCharges));
        tfServiceTax.setText(String.valueOf(serviceTax));
        tfTourismTax.setText(String.valueOf(tourismTax));
        tfTotalCharge.setText(String.valueOf(totalCharge));
    }
    
    
    private int calculateTotalDaysBooked() {
        Date checkInDate = dcCheckInDate.getDate();
        Date checkOutDate = dcCheckOutDate.getDate();
        
        // Calculate the time difference in milliseconds
        long timeDifference = checkOutDate.getTime() - checkInDate.getTime();
        
        // Convert milliseconds to days
        int totalDays = (int) (timeDifference / (1000 * 60 * 60 * 24));
        
        return totalDays;
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BookingReceiptPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BookingReceiptPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BookingReceiptPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BookingReceiptPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        
        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BookingReceiptPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBook;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnView;
    private javax.swing.JComboBox<String> cbPaymentMethod;
    private com.toedter.calendar.JDateChooser dcBookingDate;
    private com.toedter.calendar.JDateChooser dcCheckInDate;
    private com.toedter.calendar.JDateChooser dcCheckOutDate;
    private com.toedter.calendar.JDateChooser dcPaymentDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel jlabel;
    private javax.swing.JPanel paneReceipt;
    private javax.swing.JTextArea taReceipt;
    private javax.swing.JTable tbRoomReservationDate;
    private javax.swing.JTable tbSelectedRoom;
    private javax.swing.JTextField tfBookingID;
    private javax.swing.JTextField tfCustomerID;
    private javax.swing.JTextField tfCustomerName;
    private javax.swing.JTextField tfEmail;
    private javax.swing.JTextField tfIC;
    private javax.swing.JTextField tfPhoneNumber;
    private javax.swing.JTextField tfReceiptNo;
    private javax.swing.JTextField tfServiceTax;
    private javax.swing.JTextField tfTotalCharge;
    private javax.swing.JTextField tfTotalDaysBooked;
    private javax.swing.JTextField tfTotalRoomCharges;
    private javax.swing.JTextField tfTourismTax;
    // End of variables declaration//GEN-END:variables


}
