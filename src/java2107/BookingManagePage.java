/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package java2107;

import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Lim Ee Chian
 */
public class BookingManagePage extends javax.swing.JFrame {
    private TableRowSorter<DefaultTableModel> originalSorter;
   
   
    public BookingManagePage() {
        initComponents();
        // Set the location of the JFrame form to be centered on the screen
        setLocationRelativeTo(null);
        
        loadBookingData();
        
        // Initialization code or data loading code
        DefaultTableModel model = (DefaultTableModel) tbManageBookings.getModel();
        originalSorter = new TableRowSorter<>(model);
        tbManageBookings.setRowSorter(originalSorter);        
 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbManageBookings = new javax.swing.JTable();
        tfSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        dcFrom = new com.toedter.calendar.JDateChooser();
        dcTo = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btnRefresh = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();

        setTitle("Serenity Sands Retreat Hotel Room Booking System");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(153, 0, 0));

        jLabel1.setFont(new java.awt.Font("Monotype Corsiva", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Serenity Sands Retreat");

        jLabel2.setFont(new java.awt.Font("Monotype Corsiva", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Hotel Room Booking System");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(340, 340, 340)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(306, 306, 306))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(14, 14, 14))
        );

        jLabel6.setFont(new java.awt.Font("Mongolian Baiti", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(153, 0, 0));
        jLabel6.setText("Manage Bookings");

        tbManageBookings.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tbManageBookings.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Booking ID", "Booking Date", "Customer ID", "Customer Name", "Check-in Date", "Check-out Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbManageBookings.setSelectionBackground(new java.awt.Color(153, 0, 0));
        tbManageBookings.setSelectionForeground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(tbManageBookings);
        if (tbManageBookings.getColumnModel().getColumnCount() > 0) {
            tbManageBookings.getColumnModel().getColumn(0).setResizable(false);
            tbManageBookings.getColumnModel().getColumn(0).setPreferredWidth(10);
            tbManageBookings.getColumnModel().getColumn(1).setResizable(false);
            tbManageBookings.getColumnModel().getColumn(1).setPreferredWidth(10);
            tbManageBookings.getColumnModel().getColumn(2).setResizable(false);
            tbManageBookings.getColumnModel().getColumn(2).setPreferredWidth(10);
            tbManageBookings.getColumnModel().getColumn(3).setResizable(false);
            tbManageBookings.getColumnModel().getColumn(3).setPreferredWidth(20);
            tbManageBookings.getColumnModel().getColumn(4).setResizable(false);
            tbManageBookings.getColumnModel().getColumn(4).setPreferredWidth(15);
            tbManageBookings.getColumnModel().getColumn(5).setResizable(false);
            tbManageBookings.getColumnModel().getColumn(5).setPreferredWidth(15);
        }

        tfSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfSearchKeyTyped(evt);
            }
        });

        btnSearch.setBackground(new java.awt.Color(153, 0, 0));
        btnSearch.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        btnSearch.setForeground(new java.awt.Color(255, 255, 255));
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(153, 0, 0));
        jLabel3.setText("Booking Date(s)");

        jLabel4.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(153, 0, 0));
        jLabel4.setText("From");

        jLabel5.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(153, 0, 0));
        jLabel5.setText("To");

        btnRefresh.setBackground(new java.awt.Color(153, 0, 0));
        btnRefresh.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        btnRefresh.setForeground(new java.awt.Color(255, 255, 255));
        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(153, 0, 0));
        btnDelete.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnEdit.setBackground(new java.awt.Color(153, 0, 0));
        btnEdit.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        btnEdit.setForeground(new java.awt.Color(255, 255, 255));
        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(323, 323, 323))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(63, 63, 63))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(dcTo, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(dcFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(327, 327, 327)
                                .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(44, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 771, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(35, 35, 35))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addGap(16, 16, 16)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                        .addGap(23, 23, 23)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnEdit, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                                .addGap(6, 6, 6)))
                        .addGap(47, 47, 47))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(dcFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addComponent(dcTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tfSearchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfSearchKeyTyped
        // Press enter key to search
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            DefaultTableModel model = (DefaultTableModel) tbManageBookings.getModel();
            TableRowSorter<DefaultTableModel> searchSorter = new TableRowSorter<>(model);
            tbManageBookings.setRowSorter(searchSorter);

            String searchText = tfSearch.getText();
            searchSorter.setRowFilter(RowFilter.regexFilter(searchText));
        }
    }//GEN-LAST:event_tfSearchKeyTyped

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // Search button - search the range of booking date
        
        try {
            // Get the selected booking date range from date choosers
            Date bookingDateFrom = dcFrom.getDate();
            Date bookingDateTo = dcTo.getDate();
            
            
            // Call the checkBookingDateRange() function
            checkBookingDateRange(bookingDateFrom,bookingDateTo);
            
        } catch (ParseException e) {
            System.out.println("ParseException occured during search: " + e.getMessage());
        }
        

    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // Refresh button

        // Reload the original data from the file
        loadBookingData();

        // Clear the search text field
        tfSearch.setText("");
        
        // Clear the date chooser
        dcFrom.setDate(null);
        dcTo.setDate(null);
        
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // Delete button
        
        int rowToDelete = tbManageBookings.getSelectedRow();  // Row number to delete
        if (rowToDelete != -1) { // Check if a row is selected            

            int modelDeleteRow = tbManageBookings.convertRowIndexToModel(rowToDelete);  // Convert to model index
     
            try {                       
                DefaultTableModel model = (DefaultTableModel) tbManageBookings.getModel();
                String selectedBookingID = tbManageBookings.getValueAt(modelDeleteRow, 0).toString();
                System.out.println("Selected Row Number: " + modelDeleteRow); 
                
                // Delete the row based on the model index
                model.removeRow(modelDeleteRow);
                              

                    String filePath1 = "receiptInfo.txt";
                    String filePath2 = "bookingInfo.txt";

                    try {
                        File inputFile1 = new File(filePath1);                
                        File inputFile2 = new File(filePath2);

                        // Read the contents of the original files
                        BufferedReader br1 = new BufferedReader(new FileReader(inputFile1));  
                        BufferedReader br2 = new BufferedReader(new FileReader(inputFile2));
                        List<String> lines1 = new ArrayList<>();
                        List<String> lines2 = new ArrayList<>();

                        String line1;
                        while ((line1 = br1.readLine()) != null) {
                            String[] rowInFile1 = line1.split(":");
                            if (rowInFile1.length != 17) {
                                // Skip the line if it doesn't have the correct number of elements
                                continue;
                            }

                            String existingBookingID1 = rowInFile1[3].trim();
                            if (existingBookingID1.equals(selectedBookingID)) {
                                // Skip the line if it matches the selectedBookingID
                                continue;

                            }
                            lines1.add(line1);
                        }
                        br1.close();

                        String line2;
                        while ((line2 = br2.readLine()) != null) {
                            String[] rowInFile2 = line2.split(":");
                            if (rowInFile2.length != 7) {
                                // Skip the line if it doesn't have the correct number of elements
                                continue;
                            }

                            String existingBookingID2 = rowInFile2[0].trim();
                            if (existingBookingID2.equals(selectedBookingID)) {
                                // Skip the line if it matches the selectedBookingID
                                continue;                        
                            } 
                            lines2.add(line2);
                        }
                        br2.close();
                        
                        // Write the modified data back to the original file
                        BufferedWriter bw1 = new BufferedWriter(new FileWriter(filePath1));                
                        for (String line : lines1) {
                            bw1.write(line);
                            bw1.newLine();
                        }
                        bw1.close();               

                        BufferedWriter bw2 = new BufferedWriter(new FileWriter(filePath2));              
                        for (String line : lines2) {
                            bw2.write(line);
                            bw2.newLine();
                        }
                        bw2.close();

                    } catch (IOException e) {
                        System.out.println("IOException occured during delete: " + e.getMessage());
                    }

                    System.out.println("Row Deleted successfully");

                    // Clear the text fileds                
                    tfSearch.setText("");

                    // Clear the date chooser
                    dcFrom.setDate(null);
                    dcTo.setDate(null);

            } catch (IndexOutOfBoundsException e) {
                // Handle the exception silently or display a custom error message
                System.out.println("IndexOutOfBoundsException occured during delete: " + e.getMessage());
            }
        } else {
            // Display an error message indicating that no row is selected
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");               
        }    
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // Edit button - modify customer's booking information
        
        try {
            int selectedRow = tbManageBookings.getSelectedRow();
            if (selectedRow != -1) {
                // Get the selected booking ID
                String selectedBookingID = tbManageBookings.getValueAt(selectedRow, 0).toString();

                // Set the status to "Old Booking"
                BookingStatus.status = BookingStatus.STATUS_OLD;

                // Navigate to the BookingReceiptPage
                BookingReceiptPage bookings_receipts = new BookingReceiptPage();
                // Using setBookingID() method to pass the selected booking ID to the BookingReceiptPage
                bookings_receipts.setBookingID(selectedBookingID); 
                try {
                    bookings_receipts.loadOldBookingData(selectedBookingID);
                } catch (ParseException e) {
                    System.out.println("ParseException occured during edit: " +e.getMessage());
                }
                bookings_receipts.setVisible(true);
            } else {
                // Display an error message indicating that no row is selected
                JOptionPane.showMessageDialog(rootPane, "Please select a row to edit.");               
            }  
        } catch (IndexOutOfBoundsException e) {
                System.out.println("IndexOutOfBoundsException occured during edit: " + e.getMessage());
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void loadBookingData() {
        // Load receiptInfo.txt
        DefaultTableModel model = (DefaultTableModel) tbManageBookings.getModel();
        model.setRowCount(0);
        
        try (BufferedReader br = new BufferedReader(new FileReader("receiptInfo.txt"))) {  
            String line;                        
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(":");
                if (parts.length >= 17) {                    
                    String bookingID = parts[3].trim();
                    String bookingDate = parts[4].trim();
                    String customerID = parts[5].trim();
                    String customerName = parts[6].trim();
                    String checkInDate = parts[10].trim();
                    String checkOutDate = parts[11].trim();
    
                    Object[] rowData = {bookingID, bookingDate, customerID, customerName, checkInDate, checkOutDate};
                    model.addRow(rowData);  
                } else {
                    System.out.println("Invalid line: " + line);
                }     
            }
                        
            // Initialization code or data loading code
            originalSorter = new TableRowSorter<>(model);
            tbManageBookings.setRowSorter(originalSorter);
        } catch (IOException e) {
            System.out.println("IOException occured during loading booking data: " + e.getMessage());
        }
    }
    
    
    private void checkBookingDateRange(Date bookingDateFrom, Date bookingDateTo) throws ParseException {
        
        if (bookingDateFrom == null || bookingDateTo == null) {
            JOptionPane.showMessageDialog(this, "Please select both 'From' and 'To' dates.");
            return;
        }

        DefaultTableModel model = (DefaultTableModel) tbManageBookings.getModel();
        model.setRowCount(0); // Clear the table before populating with new data
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        
        // Load booking date from receiptInfo.txt file
        try (BufferedReader br = new BufferedReader(new FileReader("receiptInfo.txt"))) {            
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(":");
                if (parts.length >= 17) {
                    String bookingDateString = parts[4].trim();
                    Date bookingDate = dateFormat.parse(bookingDateString);
                    
                    // Check if the bookingDate is within the selected range
                    if ((bookingDate.compareTo(bookingDateFrom) == 0 || bookingDate.compareTo(bookingDateFrom) >= 0)
                            && (bookingDate.compareTo(bookingDateTo) <= 0 || bookingDate.compareTo(bookingDateTo) == 0)) { 
                        String bookingID = parts[3].trim();
                        String customerID = parts[5].trim();
                        String customerName = parts[6].trim();
                        String checkInDate = parts[10].trim();
                        String checkOutDate = parts[11].trim();
                        
                        Object[] rowData = {bookingID,bookingDateString,customerID,customerName,checkInDate,checkOutDate};
                        model.addRow(rowData);
                    }
                } else {
                    System.out.println("Invalid line: " + line);
                }
            }
        } catch (IOException e) {
            System.out.println("IOException occured during checking booking date range: " + e.getMessage());
        } catch (ParseException e) {
            System.out.println("Error parsing booking date: " + e.getMessage());
        } catch (NullPointerException e) {
            // Handle the exception gracefully
            System.out.println("NullPointerException occured during checking booking date range: " + e.getMessage());
        }   
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BookingManagePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BookingManagePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BookingManagePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BookingManagePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BookingManagePage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSearch;
    private com.toedter.calendar.JDateChooser dcFrom;
    private com.toedter.calendar.JDateChooser dcTo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbManageBookings;
    private javax.swing.JTextField tfSearch;
    // End of variables declaration//GEN-END:variables
}
